Compiled from String.java
public final class java.lang.String implementjava.io.Serializable,java.lang.Comparable,java.lang.CharSequence,{
 java.lang.String(byte[],int,int,);
 java.lang.String(byte[],java.nio.charset.Charset,);
 java.lang.String(byte[],java.lang.String,)throws java.io.UnsupportedEncodingException,;
 java.lang.String(byte[],int,int,java.nio.charset.Charset,);
 java.lang.String(byte[],int,int,java.lang.String,)throws java.io.UnsupportedEncodingException,;
 java.lang.String(int,int,char[],);
 java.lang.String(java.lang.StringBuilder,);
 java.lang.String(java.lang.StringBuffer,);
 java.lang.String(byte[],);
 java.lang.String(int[],int,int,);
 java.lang.String();
 java.lang.String(char[],);
 java.lang.String(java.lang.String,);
 java.lang.String(char[],int,int,);
 java.lang.String(byte[],int,);
 java.lang.String(byte[],int,int,int,);
 public final static  java.util.Comparator CASE_INSENSITIVE_ORDER;
 public boolean equals(java.lang.Object,) ;
 public java.lang.String toString() ;
 public int hashCode() ;
 public int compareTo(java.lang.String,) ;
 public int compareTo(java.lang.Object,) ;
 static int indexOf(char[],int,int,char[],int,int,int,) ;
 public int indexOf(int,int,) ;
 public int indexOf(java.lang.String,int,) ;
 public int indexOf(java.lang.String,) ;
 public int indexOf(int,) ;
 public static java.lang.String valueOf(java.lang.Object,) ;
 public static java.lang.String valueOf(char[],int,int,) ;
 public static java.lang.String valueOf(char[],) ;
 public static java.lang.String valueOf(float,) ;
 public static java.lang.String valueOf(double,) ;
 public static java.lang.String valueOf(int,) ;
 public static java.lang.String valueOf(boolean,) ;
 public static java.lang.String valueOf(char,) ;
 public static java.lang.String valueOf(long,) ;
 public char charAt(int,) ;
 public int codePointBefore(int,) ;
 public int codePointCount(int,int,) ;
 public int compareToIgnoreCase(java.lang.String,) ;
 public boolean contentEquals(java.lang.StringBuffer,) ;
 public boolean contentEquals(java.lang.CharSequence,) ;
 public boolean equalsIgnoreCase(java.lang.String,) ;
 private int indexOfSupplementary(int,int,) ;
 private int lastIndexOfSupplementary(int,int,) ;
 public int offsetByCodePoints(int,int,) ;
 public boolean regionMatches(int,java.lang.String,int,int,) ;
 public boolean regionMatches(boolean,int,java.lang.String,int,int,) ;
 private static void checkBounds(byte[],int,int,) ;
 public int codePointAt(int,) ;
 public java.lang.String concat(java.lang.String,) ;
 public boolean contains(java.lang.CharSequence,) ;
 public static java.lang.String copyValueOf(char[],) ;
 public static java.lang.String copyValueOf(char[],int,int,) ;
 public boolean endsWith(java.lang.String,) ;
 public static java.lang.String format(java.util.Locale,java.lang.String,Object[],) ;
 public static java.lang.String format(java.lang.String,Object[],) ;
 public void getBytes(int,int,byte[],int,) ;
 public byte[] getBytes() ;
 public byte[] getBytes(java.nio.charset.Charset,) ;
 public byte[] getBytes(java.lang.String,) throws java.io.UnsupportedEncodingException,;
 void getChars(char[],int,) ;
 public void getChars(int,int,char[],int,) ;
 public native java.lang.String intern() ;
 public boolean isEmpty() ;
 static int lastIndexOf(char[],int,int,char[],int,int,int,) ;
 public int lastIndexOf(java.lang.String,) ;
 public int lastIndexOf(int,int,) ;
 public int lastIndexOf(int,) ;
 public int lastIndexOf(java.lang.String,int,) ;
 public int length() ;
 public boolean matches(java.lang.String,) ;
 public java.lang.String replace(char,char,) ;
 public java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence,) ;
 public java.lang.String replaceAll(java.lang.String,java.lang.String,) ;
 public java.lang.String replaceFirst(java.lang.String,java.lang.String,) ;
 public String[] split(java.lang.String,int,) ;
 public String[] split(java.lang.String,) ;
 public boolean startsWith(java.lang.String,int,) ;
 public boolean startsWith(java.lang.String,) ;
 public java.lang.CharSequence subSequence(int,int,) ;
 public java.lang.String substring(int,int,) ;
 public java.lang.String substring(int,) ;
 public char[] toCharArray() ;
 public java.lang.String toLowerCase() ;
 public java.lang.String toLowerCase(java.util.Locale,) ;
 public java.lang.String toUpperCase(java.util.Locale,) ;
 public java.lang.String toUpperCase() ;
 public java.lang.String trim() ;
}